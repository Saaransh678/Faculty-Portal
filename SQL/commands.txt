-- user_id = -1 for cleaning active by date, else for normal active entries for user_id
-----------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION remove_from_active(user_id int, decision_id int, verdict bool)
returns void AS $$
declare
    curr_date DATE;
    last_date DATE;
    start_date DATE;    
    number_leaves int;
    curs refcursor;
    row records;

begin
    SELECT last_clean_date from main_info_scheme into last_date;
    SELECT CURRENT_DATE from main_info_scheme into curr_date;
    if user_id = -1 then
        if curr_date <= last_date
            return;
        END IF;
        OPEN curs FOR (SELECT * from main_active_leave_entries where starting_date <= curr_date)
    else
        OPEN curs FOR (SELECT * from main_active_leave_entries where id = user_id )    
    END IF;
    
    LOOP
    FETCH curs into row;
    exit when not found;

    INSERT INTO previous_record("EntryID", "ApplicantID", "DecisionMakerID", starting_date, num_leaves, decisiondate, was_approved) VALUES(row.id, decision_id, row.starting_date, row.num_leaves, curr_date, verdict)
    END LOOP
end;
$$ language 'plpgsql';
-----------------------------------------------------------------------------------------------


/*-----------------
DROP FUNCTION clean_active_entries();
CREATE OR REPLACE FUNCTION clean_active_entries()
returns void AS $$
declare
    curr_date DATE;
    last_date DATE;

begin
    SELECT last_clean_date from main_info_scheme into last_date;
    SELECT CURRENT_DATE main_info_scheme into curr_date;
    if last_date < curr_date:

    endif

end;

$$ language 'plpgsql';
SELECT * from clean_active_entries();
------------------------ */


-----------------------------------------------------------------------------------------------
 CREATE OR REPLACE FUNCTION get_personal_id(user_id int)
 returns json AS $$
 declare
     level int;
     personal_details record;
 BEGIN
        select permission_level into level from main_Faculty where "FacultyID" = user_id;
        if user_id > 5 then
            select main_faculty."FacultyID", main_faculty.dept, main_faculty.leaves_remaining, main_faculty.permission_level, auth_user.username, auth_user.email, auth_user.first_name, auth_user.last_name  into personal_details from main_Faculty, auth_user where "FacultyID" = user_id AND user_id = id;
        else 
            select main_faculty."FacultyID", main_faculty.dept, main_faculty.leaves_remaining, main_faculty.permission_level, auth_user.username, auth_user.email, auth_user.first_name, auth_user.last_name  into personal_details from main_Faculty, auth_user where permission_level = level AND "FacultyID" != user_id AND "FacultyID" = id;
        end if;
 		return row_to_json(personal_details);

 END;
$$ LANGUAGE 'plpgsql';
-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_active_records(user_id int)
RETURNS SETOF JSON AS $$
Declare
 rec record;
BEGIN
for rec in
	Select * from main_decision_record as dec, main_active_leave_entries as act 
	where act.id = "EntryID" and is_active = True and "FacultyID"=user_id
	ORDER BY "EntryID", timecreated
    loop
        return next row_to_json(rec);
    end loop;
    
END;
$$ LANGUAGE 'plpgsql';
-----------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_past_records(user_id int)
RETURNS SETOF JSON AS $$
Declare
 rec record;
BEGIN
for rec in
	Select * from main_decision_record as dec, main_previous_request_record as prev
	where prev."EntryID" = dec."EntryID" and is_active = False and "ApplicantID"=user_id
	ORDER BY prev."EntryID", timecreated
    loop
        return next row_to_json(rec);
    end loop;
END;
$$ LANGUAGE 'plpgsql';
-----------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_active_requests(perm_level int, depart character varying(8))
RETURNS SETOF JSON AS $$
Declare
 rec record;
BEGIN
if perm_level=1 then 
for rec in
	select m1."FacultyID" as fac_id, a1.first_name as f_name, a1.last_name as s_name, m1.application_date as app_date, m1.starting_date as start_date, m1.num_leaves as n_leaves, m1.curr_status as cur_pos  
	from "main_active_leave_entries" as m1  , "main_faculty" as m2, "auth_user" as a1 
	where m1."FacultyID"=m2."FacultyID" and m1."FacultyID"=a1.id and m1.curr_status=(perm_level-1) and m1.dept=depart
    loop
        return next row_to_json(rec);
    end loop;
elsif perm_level=2 then 
for rec in
	select m1."FacultyID" as fac_id, a1.first_name as f_name, a1.last_name as s_name, m1.application_date as app_date, m1.starting_date as start_date, m1.num_leaves as n_leaves, m1.curr_status as cur_pos  
	from "main_active_leave_entries" as m1  , "main_faculty" as m2, "auth_user" as a1 
	where m1."FacultyID"=m2."FacultyID" and m1."FacultyID"=a1.id and m1.curr_status=perm_level-1
  loop
        return next row_to_json(rec);
    end loop;
else 
for rec in
	select m1."FacultyID" as fac_id, a1.first_name as f_name, a1.last_name as s_name, m1.application_date as app_date, m1.starting_date as start_date, m1.num_leaves as n_leaves, m1.curr_status as cur_pos  
	from "main_active_leave_entries" as m1  , "main_faculty" as m2, "auth_user" as a1 
	where m1."FacultyID"=m2."FacultyID" and m1."FacultyID"=a1.id and (m1.curr_status=perm_level-1 or m1.curr_status=perm_level-2)
    loop
        return next row_to_json(rec);
    end loop;  
	 end if;
END;
$$ LANGUAGE 'plpgsql';
----------------------